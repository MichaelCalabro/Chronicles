{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Tree","props","state","rootNode","root","currentNode","nodePath","name","this","father","length","mother","desc","decription","children","map","child","className","onClick","goToChild","childHeader","descSection","id","fatherButton","goToFather","pathItems","node","goBackToNode","class","newNode","setState","concat","prevNode","newPath","pop","React","Component","PageHeader","App","chronicles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35dc96d9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport chronicles from './chronicles.json';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n    \n      <PageHeader/>\n\n      <Tree root={chronicles.chronicles}/>\n\n    </div>\n  );\n}\n\nclass Tree extends React.Component{\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      rootNode : props.root,\n      currentNode : props.root,\n      nodePath : [props.root]\n    }\n  }\n\n  render(){\n    const name = this.state.currentNode.name;\n    const father = this.state.nodePath.length > 1 ? this.state.nodePath[this.state.nodePath.length - 2].name : null;\n    const mother = this.state.currentNode.mother;\n    const desc = this.state.currentNode.decription;\n    const children = this.state.currentNode.children.map((child) =>\n\n      (child.mother != null ? \n        <li>\n          <h3 className=\"Onciale Note\">({child.mother})</h3>\n          <button className=\"Button Node Onciale\" onClick={() => this.goToChild(child)}>{child.name}</button>    \n        </li>\n        :  \n        <li>\n          <button className=\"Button Node Onciale\" onClick={() => this.goToChild(child)}>{child.name}</button>    \n        </li>\n      )\n    );\n\n    //Only display child header if > 0 children\n    const childHeader = this.state.currentNode.children.length > 0 ?\n      <h3 className=\"Onciale Inter\">Sons:</h3>\n    :\n      null;\n\n    //Only display description section if not null\n    const descSection = desc != null ? <div><hr/>\n    <p id=\"description\" className=\"Onciale\">{desc}</p></div> : null;\n\n    //Only allow going back to father if father exists\n    const fatherButton = this.state.nodePath.length > 1 ? \n      <button className=\"Button Onciale\" onClick={() => this.goToFather()}>Return to Father</button>\n      : null;\n\n    //Node path from Adam to current node    \n    const pathItems = this.state.nodePath.map((node) =>\n        (node.children.length > 0 ?\n          <div>\n            <button className=\"Path-Node Onciale\" onClick={() => this.goBackToNode(node)}>{node.name}</button>\n            <div class=\"VL1\"></div>\n          </div>\n          :\n          <button className=\"Path-Node Onciale\" onClick={() => this.goBackToNode(node)}>{node.name}</button>\n        )\n    );\n\n    return(\n      <div>\n        <div className=\"Main\">\n          <div className=\"Page\">\n            <div className=\"Node Main-Node\">\n              <h2 id=\"name\" className=\"Onciale\">{name}</h2>\n              <p id=\"father\" className=\"Onciale\">Father: {father != null ? father : '?'}</p>\n              <p id=\"mother\" className=\"Onciale\">Mother: {mother != null ? mother : '?'}</p>\n              {descSection}\n            </div>\n            <div className=\"Child-List\">\n              {childHeader}\n              <ul>{children}</ul>\n            </div>\n\n            {fatherButton}\n          </div>\n        </div>\n\n        <div className=\"SideBar\">\n          {pathItems}\n        </div>\n      </div>\n    )\n  }\n\n\n  goToChild(newNode){\n    this.setState({\n      currentNode: newNode,\n      nodePath : this.state.nodePath.concat(newNode)\n    });\n  }\n\n  returnToRoot(){\n    this.setState({\n      currentNode: this.state.rootNode,\n      nodePath : [this.state.rootNode]\n    });\n\n  }\n\n  goBackToNode(prevNode){\n    const newPath = this.state.nodePath;\n\n    while(newPath.length > 0){\n\n      if(newPath[newPath.length - 1] == prevNode){\n        break;\n      }\n\n      newPath.pop();\n    }\n\n    this.setState({\n      currentNode : prevNode,\n      nodePath : newPath\n    })\n  }\n\n  goToFather(){\n    this.goBackToNode(this.state.nodePath[this.state.nodePath.length -2]);\n  }\n}\n\n\nfunction PageHeader(){\n\n  return(\n    <header>\n      <h1 className=\"Onciale\">Chronicles</h1>   \n    </header>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}